# .circleci/config.yml
version: 2.1

# 如需严格防并发，可考虑 queue orb（需个人 API Token）。
# orbs:
#   queue: eddiewebb/queue@x.y.z   # 可选：用于串行化流水线

jobs:
  monitor:
    docker:
      - image: cimg/python:3.9    # 预装 Python 3.9 与 pip
    working_directory: ~/project
    environment:
      # 建议在 CircleCI 项目设置里添加环境变量 GH_TOKEN（GitHub PAT，具 repo 权限）
      PIP_CACHE_DIR: ~/.cache/pip
    steps:
      - checkout

      # （可选）解除浅克隆，便于后续推送
      - run:
          name: Unshallow fetch (optional)
          command: |
            git fetch --prune --unshallow || true

      # 如使用 queue orb，可以在此阻塞直到前序同组构建完成
      # - queue/until_front_of_line:
      #     consider-branch: true
      #     time: "30"   # 最多等待 30 分钟

      # 保险：即使手动触发，也只在北京时间窗口内继续执行
      - run:
          name: Check Beijing-time window (07:30–22:00)
          command: |
            now=$(TZ=Asia/Shanghai date +%H:%M)
            echo "Now(CST)=$now"
            if [[ "$now" < "07:30" || "$now" > "22:00" ]]; then
              echo "⏭️  Not in window, skipping."
              circleci-agent step halt
            fi

      # 恢复 pip 缓存
      - restore_cache:
          keys:
            - v1-pip-{{ arch }}-{{ .Branch }}-{{ checksum "requirements.txt" }}
            - v1-pip-{{ arch }}-{{ .Branch }}
            - v1-pip-

      # （如 sq.py 不需要浏览器，可删掉下面两块注释）
      # - run:
      #     name: Install system dependencies
      #     command: |
      #       sudo apt-get update
      #       sudo apt-get install -y wget gnupg unzip

      # - run:
      #     name: Install Chrome
      #     command: |
      #       wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-linux.gpg
      #       echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-linux.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
      #       sudo apt-get update
      #       sudo apt-get install -y google-chrome-stable

      - run:
          name: Install Python dependencies
          command: |
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 保存 pip 缓存
      - save_cache:
          paths:
            - ~/.cache/pip
          key: v1-pip-{{ arch }}-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: Run seat monitor
          no_output_timeout: 15m
          command: |
            echo "开始运行座位监控 - $(TZ=Asia/Shanghai date)"
            python sq.py $(date +%Y-%m-%d)
            echo "监控完成 - $(TZ=Asia/Shanghai date)"

      - run:
          name: Show log if exists
          command: |
            if [ -f "seat_monitor.log" ]; then
              echo "=== 最新日志 ==="
              tail -20 seat_monitor.log
            fi

      - run:
          name: Commit and push changes (skip empty)
          command: |
            git config --global safe.directory "$PWD"
            git config --global user.email "circleci-bot@example.com"
            git config --global user.name "CircleCI Bot"

            # 仅添加可能更新的文件，避免把无关新文件意外提交
            git add -A *.csv *.log 2>/dev/null || true

            # 空变更则跳过
            if git diff --staged --quiet; then
              echo "没有新的数据变更，跳过提交"
              exit 0
            fi

            git commit -m "📊 座位数据更新 $(date -u '+%Y-%m-%d %H:%M UTC')"

            # 使用 GH_TOKEN 推回当前分支；请在 CircleCI 项目/Context 里配置 GH_TOKEN
            if [ -z "$GH_TOKEN" ]; then
              echo "GH_TOKEN 未设置，无法推送。"
              exit 1
            fi
            remote_url=$(git config --get remote.origin.url)
            remote_url=${remote_url/https:\/\//https:\/\/${GH_TOKEN}@}
            git push "$remote_url" "HEAD:${CIRCLE_BRANCH}"

workflows:
  version: 2
  seat-monitor:
    triggers:
      - schedule:
          # GitHub Actions 的 UTC 计划转为 CircleCI：00:00–14:59 每 5 分钟
          cron: "*/5 0-14 * * *"
          filters:
            branches:
              only:
                - main    # ⇐ 根据你的默认分支调整
      - schedule:
          # 23:30, 23:35, …, 23:55 UTC
          cron: "30-59/5 23 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - monitor
